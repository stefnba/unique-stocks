version: '3.8'

x-airflow-common: &airflow-common
    build:
        context: .
        dockerfile: docker/Dockerfile
        args:
            AIRFLOW_HOME: ${AIRFLOW_HOME}
            AIRFLOW_PROJ_DIR: ${AIRFLOW_PROJ_DIR}
    env_file:
        - .env
    environment: &airflow-common-env
        ENV: DockerDevelopment
        AIRFLOW_HOME: ${AIRFLOW_HOME}
        TEMP_DIR_PATH: ${AIRFLOW_HOME}/temp
        AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@airflow-postgres/${AIRFLOW_DB_NAME}
        PYTHONPATH: ${AIRFLOW_HOME}/include # add include custom code
        AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
        AIRFLOW__CORE__MAX_MAP_LENGTH: 100000
        AIRFLOW__CORE__EXECUTOR: LocalExecutor
        # AIRFLOW__LOGGING__LOGGING_CONFIG_CLASS: log_config.LOGGING_CONFIG
        LOGGING_REMOTE_HOST: http://unique-stocks-log
    user: '${AIRFLOW_UID:-50000}:0'
    volumes:
        - ${AIRFLOW_PROJ_DIR}/dags:${AIRFLOW_HOME}/dags
        - ${AIRFLOW_PROJ_DIR}/logs:${AIRFLOW_HOME}/logs
        - ${AIRFLOW_PROJ_DIR}/plugins:${AIRFLOW_HOME}/plugins
        - ${AIRFLOW_PROJ_DIR}/include:${AIRFLOW_HOME}/include
    depends_on: &airflow-common-depends-on
        airflow-postgres:
            condition: service_healthy
    networks:
        - unique-stocks-network
        - default

services:
    airflow-webserver:
        <<: *airflow-common
        depends_on:
            - airflow-postgres
        ports:
            - '${AIRFLOW__WEBSERVER_PORT}:8080'
        entrypoint: ${AIRFLOW_HOME}/airflow_init.sh
        restart: always

    airflow-scheduler:
        <<: *airflow-common
        command: scheduler
        depends_on:
            - airflow-webserver

    airflow-postgres:
        image: postgres:14.5-alpine
        ports:
            - '5418:5432'
        restart: always
        env_file:
            - .env
        environment:
            POSTGRES_USER: ${AIRFLOW_DB_USER}
            POSTGRES_PASSWORD: ${AIRFLOW_DB_PASSWORD}
            POSTGRES_DB: ${AIRFLOW_DB_NAME}
        healthcheck:
            test: ['CMD', 'pg_isready', '-U', 'airflow']
            interval: 5s
            retries: 5
        volumes:
            - airflow-postgres-data:/var/lib/postgresql/data/

volumes:
    airflow-postgres-data:

networks:
    unique-stocks-network:
        name: unique-stocks-network
        external: true
